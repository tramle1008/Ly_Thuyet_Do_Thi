void strong_connect(Graph* G, int x){
    num[x] = min_num[x] = k; k++;
    push(&S, x);
    on_stack[x] = 1;

    List list = neighbors(G, x);
    int j;
    /* xét các đỉnh kề của nó */
    for(j = 1; j<= list.size; j++){
        int y = element_at(&list, j);
        if(num[y] < 0){
            strong_connect(G,y);
            min_num[x] = min(min_num[x], min_num[y]);
        } else if(on_stack[y])
            min_num[x] = min(min_num[x], num[y]);
    }
    printf("min_num[%d]  = %d\n", x, min_num[x]);

    if(num[x] == min_num[x]){
        printf("%d la dinh khop.\n", x);
        int w;
        do{
            w= top(&S);
            pop(&S);
            on_stack[w] = 0;
        } while(w != x);
    }
}

====
void strong_connect(Graph* G, int x = 1){
    num[1] = min_num[1] = 1; k++= 2;
    push(&S, 1);
    on_stack[1] = 1;

    List list = neighbors(G, 1) = {2, 6};
    int j;
    /* xét các đỉnh kề của nó */
    for(j = 1; j<= 2; j++){
        int y = element_at(&list, 1)= 2;
        if(num[2] < 0){
            strong_connect(G,2);
            void strong_connect(Graph* G, int 2){
                num[2] = min_num[2] = k=2; k++=3;
                push(&S, 2);
                on_stack[x] = 1;

                List list = neighbors(G, 2)={3};
                int j;
                /* xét các đỉnh kề của nó */
                for(j = 1; j<= list.size=1; j++){
                    int y = element_at(&list, 1)= 3;
                    if(num[3] < 0){
                        strong_connect(G,3);
                            void strong_connect(Graph* G, int 3){
                                num[3] = min_num[3] = k= 3; k++=4;
                                push(&S, 3);
                                on_stack[x] = 1;

                                List list = neighbors(G, 3)={2,4};
                                int j;
                                /* xét các đỉnh kề của nó */
                                for(j = 1; j<= list.size <=2; j++){
                                   
                                    int y = element_at(&list, 1)= 2;
                                    if(num[2] < 0){ //sai
                                        strong_connect(G,y);
                                        min_num[x] = min(min_num[x], min_num[y]);
                                    } else if(on_stack[2]) //đúng
                                        min_num[3] = min(min_num[3], num[2]) = 2;
                                    
                                    int y = element_at(&list, 2)= 4;
                                    if(num[4] < 0){ //đúng
                                        strong_connect(G,4);
                                            void strong_connect(Graph* G, int 4){
                                                num[4] = min_num[4] = k=4; k++=5;
                                                push(&S, 4);
                                                on_stack[x] = 1;

                                                List list = neighbors(G, 4)= {8};
                                                int j;
                                                /* xét các đỉnh kề của nó */
                                                for(j = 1; j<= list.size<=1; j++){
                                                    int y = element_at(&list, 1)=8;
                                                    if(num[8] < 0){
                                                        strong_connect(G,8);
                                                            void strong_connect(Graph* G, int 8){
                                                                num[8] = min_num[8] = k= 5; k++= 6;
                                                                push(&S, 8);
                                                                on_stack[8] = 1;

                                                                List list = neighbors(G, 8)={4,7};
                                                                int j;
                                                                /* xét các đỉnh kề của nó */
                                                                for(j = 1; j<= list.size=2; j++){
                                                                    int y = element_at(&list, 1)=4;
                                                                    if(num[4] < 0){//sai
                                                                        strong_connect(G,y);
                                                                        min_num[x] = min(min_num[x], min_num[y]);
                                                                    } else if(on_stack[4])//đúng
                                                                        min_num[x = 8] = min(min_num[8], num[4])= 4;
                                                                    int y = element_at(&list, 2)=7;
                                                                    if(num[7] < 0){//đúng
                                                                        strong_connect(G,7);
                                                                            void strong_connect(Graph* G, int 7){
                                                                                num[x] = min_num[x] = k=6; k++=7;
                                                                                push(&S, 7);
                                                                                on_stack[x] = 1;

                                                                                List list = neighbors(G, x)={3,8};
                                                                                int j;
                                                                                /* xét các đỉnh kề của nó */
                                                                                for(j = 1; j<= list.size=2; j++){
                                                                                    int y = element_at(&list, 1)=3;
                                                                                    if(num[3] < 0){//sai
                                                                                        strong_connect(G,y);
                                                                                        min_num[x] = min(min_num[x], min_num[y]);
                                                                                    } else if(on_stack[3]) //đúng
                                                                                        min_num[7] = min(min_num[7], num[3]) = 3;
                                                                                   
                                                                                    int y = element_at(&list, 2)=8;
                                                                                    if(num[y] < 0){ //sai
                                                                                        strong_connect(G,y);
                                                                                        min_num[x] = min(min_num[x], min_num[y]);
                                                                                    } else if(on_stack[8])//đúng
                                                                                        min_num[7] = min(min_num[7], num[8]) = 3;
                                                                                }
                                                                                printf("min_num[%d]  = %d\n", x=7, min_num[x=7]); 3

                                                                           //     if(num[x] == min_num[x]){
                                                                                    printf("%d la dinh khop.\n", x);
                                                                                    int w;
                                                                                    do{
                                                                                        w= top(&S);
                                                                                        pop(&S);
                                                                                        on_stack[w] = 0;
                                                                                    } while(w != x);
                                                                                }
                                                                            }
                                                                            min_num[8] = min(min_num[8], min_num[7])=3;
                                                                    } //else if(on_stack[4])
                                                                      //  min_num[x = 8] = min(min_num[8], num[4])= 4;
                                                                }
                                                                printf("min_num[%d]  = %d\n", 8, min_num[8]); 3

                                                              //  if(num[x] == min_num[x]){ 5!= 3
                                                                    printf("%d la dinh khop.\n", x);
                                                                    int w;
                                                                    do{
                                                                        w= top(&S);
                                                                        pop(&S);
                                                                        on_stack[w] = 0;
                                                                    } while(w != x);
                                                                }
                                                            }
                                                               min_num[4] = min(min_num[4], min_num[8])= 3;   
                                                    } //else if(on_stack[y])
                                                       // min_num[x] = min(min_num[x], num[y]);
                                                }
                                                printf("min_num[%d]  = %d\n",x= 4, min_num[4]); 3

                                              //  if(num[x] == min_num[x]){ 4!=3
                                                    printf("%d la dinh khop.\n", x);
                                                    int w;
                                                    do{
                                                        w= top(&S);
                                                        pop(&S);
                                                        on_stack[w] = 0;
                                                    } while(w != x);
                                                }
                                            }
                                        min_num[3] = min(min_num[3], min_num[4]) = 2;
                                    } //else if(on_stack[x])
                                        //min_num[x] = min(min_num[x], num[y]);
                                }
                                printf("min_num[%d]  = %d\n", x=3, min_num[x=3]); 2

                                if(num[x] == min_num[x]){ 3!= 2
                                    printf("%d la dinh khop.\n", x);
                                    int w;
                                    do{
                                        w= top(&S);
                                        pop(&S);
                                        on_stack[w] = 0;
                                    } while(w != x);
                                }
                            }                            
                        min_num[2] = min(min_num[2], min_num[3])= 2;
                    }// else if(on_stack[y])
                     //   min_num[x] = min(min_num[x], num[y]);
                }
                printf("min_num[%d]  = %d\n", x=2, min_num[x=2]); 2

                if(num[x] == min_num[x]){ 2== 2
                    printf("%d la dinh khop.\n", x); 2 la dinh khop
                    int w;
                    do{
                        w= top(&S); ///lấy ra 7 8 4 3 2
                        pop(&S);
                        on_stack[w] = 0;
                    } while(w != x);
                }
            }

           min_num[1] = min(min_num[1], min_num[2]) = 1;
        } //else if(on_stack[y])
           // min_num[x] = min(min_num[x], num[y]);
    }
  
       
        int y = element_at(&list, 2)= 6;
        if(num[6] < 0){
            strong_connect(G,6);
                void strong_connect(Graph* G, int 6){
                    num[6] = min_num[6] = k= 7; k++=8;
                    push(&S, 6);
                    on_stack[6] = 1;

                    List list = neighbors(G, 6)={2,5,7};
                    int j;
                    /* xét các đỉnh kề của nó */
                    for(j = 1; j<= list.size<=3; j++){
                        int y = element_at(&list, 1)= 2;
                        if(num[2] < 0){//sai
                            strong_connect(G,y);
                            min_num[x] = min(min_num[x], min_num[y]);
                        } else if(on_stack[y]) //sai
                            min_num[x] = min(min_num[x], num[y]);

                        int y = element_at(&list, 2)= 5;
                        if(num[5] < 0){ //đúng
                            strong_connect(G,5);
                                void strong_connect(Graph* G, int 5){
                                    num[5] = min_num[5] = 8; k++=9;
                                    push(&S, 5);
                                    on_stack[5] = 1;

                                    List list = neighbors(G, 5)={1};
                                    int j;
                                    /* xét các đỉnh kề của nó */
                                    for(j = 1; j<= list.size=1; j++){
                                        int y = element_at(&list, 1)=1;
                                        if(num[y] < 0){//sai
                                            strong_connect(G,y);
                                            min_num[x] = min(min_num[x], min_num[y]);
                                        } else if(on_stack[1]) //đúng
                                            min_num[5] = min(min_num[5], num[1])=1;
                                    }
                                    printf("min_num[%d]  = %d\n", x = 5, min_num[x= 5])= 1;

                                    if(num[5] == min_num[x]){ 8 != 1
                                        printf("%d la dinh khop.\n", x);
                                        int w;
                                        do{
                                            w= top(&S);
                                            pop(&S);
                                            on_stack[w] = 0;
                                        } while(w != x);
                                    }
                                }
                           min_num[6] = min(min_num[6], min_num[5]) = 1;
                        } //else if(on_stack[y])
                          //  min_num[x] = min(min_num[x], num[y]);

                        int y = element_at(&list, 3) = 7;
                        if(num[y] < 0){//sai
                            strong_connect(G,y);
                            min_num[x] = min(min_num[x], min_num[y]);
                        } else if(on_stack[y])//sai
                            min_num[x] = min(min_num[x], num[y]);
                    }
                    printf("min_num[%d]  = %d\n", x=6, min_num[x=6]); 1

                    if(num[x=6] == min_num[x]){  7!= 1
                        printf("%d la dinh khop.\n", x);
                        int w;
                        do{
                            w= top(&S);
                            pop(&S);
                            on_stack[w] = 0;
                        } while(w != x);
                    }
                }
            min_num[1] = min(min_num[1], min_num[6]) = 1;
        } //else if(on_stack[y])
           // min_num[x] = min(min_num[x], num[y]);
    }
     printf("min_num[%d]  = %d\n", x= 1, min_num[1]) = 1;

    if(num[x] == min_num[x]){ 1 == 1
        printf("%d la dinh khop.\n", x);
        int w;
        do{
            w= top(&S); //Lấy 5 6 1
            pop(&S);
            on_stack[w] = 0;
        } while(w != x);
}